package code{	 	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.KeyboardEvent;	import flash.display.MovieClip;	import flash.display.SimpleButton;	import flash.ui.Keyboard;		public class Player	{				public var scoreBoard:ScoreBoard;						public var name:String;		//public var distance:int = 0;		public var health:int = Utils.START;				public var current:int = -1;		public var target:int = -1;		public var cards_used:int = 0;		public var start_time:int = 0;		public var time_weight:int = 100000000;		function Player(name:String, scoreBoard:ScoreBoard) {			this.name = name;			this.scoreBoard = scoreBoard;			this.scoreBoard.setName(this.name);			this.scoreBoard.setTarget("?");			this.scoreBoard.setCurrent("?");		}		public function resetCards():void {			this.cards_used = 0;		}		public function reset():void		{			//this.distance = Utils.START;			this.health = Utils.START;			this.cards_used = 0;			this.scoreBoard.reset();		}		/*		public function updateDistance():void		{			//time = (new Date()) - start_time;			//increment = cards_used + (1/time) * time_weight;			var increment:int = cards_used;			// CHANGE: fixed increment. It takes 10 hits to kill			increment = 1;			distance += increment;		}		*/				public function decrementHealth(amount = 1):void {			this.health -= amount;			trace("health: " + this.health);		}		public function incrementCurrent(increment:int):void {			setCurrent(this.current += increment);		}				public function setCurrent(value:int):void {			this.current = value;			this.scoreBoard.setCurrent("" + value);					}				public function setTarget(value:int):void {			this.target = value;			this.scoreBoard.setTarget("" + this.target);					}		public function randomizeTarget():void {			var increment:int = 0;			for(var i:int = 0; i < Math.ceil(Utils.HAND_SIZE / 2); i++)			{				increment += Utils.random();			}			this.target = this.current + increment;			this.scoreBoard.setTarget("" + this.target);					}		public function isHit():Boolean {			return this.current == this.target;		}		public function isBust():Boolean {			return this.current > this.target;		}				public function isDead():Boolean {			return this.health <= Utils.END;		}				/*		public function isWin():Boolean {			return this.distance >= Utils.END;		}		*/					}	}