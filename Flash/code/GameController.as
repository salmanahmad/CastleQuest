package code{	 	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.KeyboardEvent;	import flash.display.MovieClip;	import flash.display.SimpleButton;	import flash.ui.Keyboard;		public class GameController extends MovieClip	{				var rfidController:RFIDController = null;		var graphicsController:GraphicsController = null;						var player1:Player;		// Player Left		var player2:Player;		// Player Right						public function GameController()		{			graphicsController = new GraphicsController(this);			rfidController = new RFIDController(this);			player1 = new Player("Player1", scoreboard1);			player2 = new Player("Player2", scoreboard2);			// Update screen every frame			addEventListener(Event.ENTER_FRAME,enterFrameHandler);			addEventListener(MouseEvent.MOUSE_DOWN, clickHandler);					}				function clickHandler(event:MouseEvent):void {			trace("here!");			if(event.shiftKey) {				graphicsController.renderAttack(1, 0);			} else {				graphicsController.renderAttack(1, 1);							}		}										public function newCard(reader:int, card:int):void		{		}						/*		public void newCard(int reader, int card)		{			Player p = null;			if(reader == 1)			{	                        println("\n\n---Player1----\n\n");          				p = player1;			}			else			if(reader == 2)			{	                        println("\n\n---Player2----\n\n");  				p = player2;			}			else			{				println("Error - unknown reader used...");				return;			}	                graphicsController.renderAttack(1,reader - 1);			p.cards_used++;			p.incrementCurrent(card);			if(p.isHit()) {				p.updateDistance();				p.setTarget();				p.resetCards();				println(p.name +  " hit!");			} else if (p.isBust()) {				p.setTarget();				p.resetCards();							println(p.name +  " bust!");						}			if(p.isWin()) {				println(p.name +  " wins...");			}		}		*/		private function reset_game():void		{			player1.reset();			player2.reset();		}																														//*************************		// Event Handling:				private function enterFrameHandler(event:Event):void		{					}						}}