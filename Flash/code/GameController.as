package code{	 	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.KeyboardEvent;	import flash.display.MovieClip;	import flash.display.SimpleButton;	import flash.ui.Keyboard;	import flash.filters.*;		public class GameController extends MovieClip	{				var pause:Boolean = true;		var gameStarted:Boolean = false;				var rfidController:RFIDController = null;		var graphicsController:GraphicsController = null;						var player0:Player;		// Player Left		var player1:Player;		// Player Right				var winningPlayer = 0;		var winningAnimation = null;		var destroyedCastle = null;				public function GameController()		{			graphicsController = new GraphicsController(this);			rfidController = new RFIDController(this);			// ScoreBoard defined as symbols in flash...			player0 = new Player("Player1", scoreboard0);			player1 = new Player("Player2", scoreboard1);			// Update screen every frame			addEventListener(Event.ENTER_FRAME,enterFrameHandler);			stage.addEventListener(KeyboardEvent.KEY_DOWN, keyHandler);						pauseGame();					}								function keyHandler(event:KeyboardEvent) :void {			trace('keyboard down!');			if(String.fromCharCode(event.charCode) == ' ') {				if(this.pause) {					resumeGame();				} else {					pauseGame();				}				if(!gameStarted) {					gameStarted = true;					resetGame();					startGame();				}								}		}										public function newCard(reader:int, card:int):void		{						if(pause) return						var player:Player = null;			var opponent:Player = null;						if(reader == 0)			{				player = player0;				opponent = player1;			}			else			if(reader == 1)			{				player = player1;				opponent = player0;			}			else			{				trace("Error - unknown reader used...");				return;			}						var player_index = reader;			var opponent_index = 1-reader;			player.cards_used++;			player.incrementCurrent(card);			if(player.isHit()) {				//player.updateDistance();				//graphicsController.renderHealth((Utils.END - player.distance) / Utils.END, opponent_index);								opponent.decrementHealth();				graphicsController.renderHealth(opponent.health / Utils.START, opponent_index);												player.setTarget();				player.resetCards();				trace(player.name +  " hit!");				graphicsController.renderAttack(1,player_index);				graphicsController.renderHit(player_index);			} else if (player.isBust()) {				player.decrementHealth();				graphicsController.renderHealth(player.health / Utils.START, player_index);								player.setTarget();				player.resetCards();								graphicsController.renderBust(player_index);								trace(player.name +  " bust!");						}			//if(player.isWin()) {			if(opponent.isDead()) {				trace(player.name +  " wins...");				gameStarted = false;								winningPlayer = player_index;				winningAnimation = graphicsController.attackQueue[graphicsController.attackQueue.length - 1];			}		}				private function pauseGame():void {			stop();									var i = 0;			for(i = 0; i < graphicsController.attackQueue.length; i++) {				graphicsController.attackQueue[i].stop();			}						for(i = 0; i < graphicsController.notificationQueue.length; i++) {				graphicsController.notificationQueue[i].stop();			}							pause = true;			pauseText.visible = true;			pauseBlur.visible = true;						// push the pause screen to the front so that it covers all of the added animations...			this.setChildIndex(pauseBlur, this.numChildren - 1);			this.setChildIndex(pauseText, this.numChildren - 1);		}				private function resumeGame():void {			play();			var i = 0;			for(i = 0; i < graphicsController.attackQueue.length; i++) {				graphicsController.attackQueue[i].play();			}						for(i = 0; i < graphicsController.notificationQueue.length; i++) {				graphicsController.notificationQueue[i].play();			}										pause = false;			pauseText.visible = false;			pauseBlur.visible = false;		}		private function resetGame():void {			graphicsController.reset();			player0.reset();			player1.reset();		}						private function startGame():void {			pause = false;			var current:Number = Utils.random()			player0.setCurrent(current);			player0.setTarget();						player1.setCurrent(current);			player1.setTarget();		}		private function enterFrameHandler(event:Event):void		{						if(winningAnimation && winningAnimation.currentFrame == winningAnimation.totalFrames) {				graphicsController.renderHealth(0, 1-winningPlayer);				winningAnimation = null;				if(winningPlayer == 0) {					destroyedCastle = castle1;				} else if(winningPlayer == 1) {					destroyedCastle = castle0;				}			}						if(destroyedCastle && destroyedCastle.currentFrame == destroyedCastle.totalFrames) {				pauseGame();				destroyedCastle = null;							}		}						}}